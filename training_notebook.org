#+title: Training Notebook
#+author: Jo Martin

* Training Neural Networks to Infer the Peclet Number of Model Runs
This notebook trains two convolutional neural networks to infer the Peclet number
of 2D streampower-diffusion landscape evolution models.  The purpose of this notebook
is to make it easy to replicate the work done in this project in Google Colab

#+BEGIN_SRC jupyter-python
!git clone https://github.com/jrymart/peclet-prediction.git
import os
os.chdir('peclet-prediction')
#+END_SRC

#+BEGIN_SRC jupyter-python :results output
import torch
from train_peclet_model import PecletModelTrainer
from ThreeLayerCNNRegressor import ThreeLayerCNNRegressor
import json
#+END_SRC

#+BEGIN_SRC jupyter-python :tangle "python.py"
with open('full_dataset_statistics.json', 'r') as f:
    stats = json.load(f)
#+End_SRC

#+BEGIN_SRC jupyter-python :results output
torch.manual_seed(0)
db_path = 'model_runs.db'
data_path = 'model_run_topography'
trainer_one = PecletModelTrainer(db_path,
                                 data_path,
                                 ThreeLayerCNNRegressor,
                                 "SELECT log_peclet FROM model_run_outputs",
                                 epochs=50,
                                 learning_rate=0.0001,
                                 **stats)
trainer_one.train()
trainer_one.evaluate()
trainer_one.save_weights('peclet_predictor_run_one.pt')
run_one_results, ax = plt.subplots()
ax.scatterplot(trainer_one.test_df['true_labels'], trainer_one.test_df['predictions'])
ax.set_xlabel('True Log Pe')
ax.set_yabel('Inferred Log Pe')
ax.set_title('Performance of Model with Seed 0')
run_one_resuts.savefig('run_one_results.png')
#+END_SRC

#+BEGIN_SRC jupyter-python :results output
torch.manual_seed(10)
trainer_two = PecletModelTrainer(db_path,
                                 data_path,
                                 ThreeLayerCNNRegressor,
                                 "SELECT log_peclet FROM model_run_outputs",
                                 epochs=50
                                 learning_rate=0.0001,
                                 **stats)
trainer_two.train()
trainer_two.evaluate()
trainer_two.save_weights('peclet_predictor_run_two.pt')
run_two_results, ax = plt.subplots()
ax.set_xlabel('True Log Pe')
ax.set_ylabel('Inferred Log Pe')
ax.set_title('Performance of Mode l with Seed 10')
run_two_results.savefig('run_two_results.png')
#+END_SRC
